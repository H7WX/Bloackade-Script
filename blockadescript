local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "Blockade Hub",
    Icon = 0,
    LoadingTitle = "Cooking Up...",
    LoadingSubtitle = "by D & 7",
    Theme = "Default",

    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false,

    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "Blockade Hub"
    },

    Discord = {
        Enabled = false,
        Invite = "noinvitelink",
        RememberJoins = true
    },

    KeySystem = false,
    KeySettings = {
        Title = "Untitled",
        Subtitle = "Key System",
        Note = "No method of obtaining the key is provided",
        FileName = "Key",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = {"Hello"}
    }
})

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")
local camera = workspace.CurrentCamera
local h = character:FindFirstChild("Humanoid")

local PlayerTap = Window:CreateTab("Player Stats", 0)
local StatSection = PlayerTap:CreateSection("Player things")
local Slider = PlayerTap:CreateSlider({
    Name = "WalkSpeed",
    Range = {16, 500},
    Increment = 5,
    Suffix = "Speed",
    CurrentValue = 16,
    Flag = "",
    Callback = function(Value)
        h.WalkSpeed = Value
    end,
})


local running = false
local Toggle = PlayerTap:CreateToggle({
    Name = "Infinite Health",
    CurrentValue = false,
    Flag = "",
    Callback = function(Value)
        running = Value
        while running do
            if h.Health <= 1 then
                h.Health = 10000
            end
            task.wait(0.1)
        end
    end,
})


local runService = game:GetService("RunService")
local userInputService = game:GetService("UserInputService")
local tweenService = game:GetService("TweenService")

local flying = false
local flySpeed = 45
local movers = {}

local FlySpeedSlider = PlayerTap:CreateSlider({
    Name = "Fly Speed",
    Range = {10, 200},
    Increment = 5,
    Suffix = "Speed",
    CurrentValue = 45,
    Flag = "FlySpeed",
    Callback = function(Value)
        flySpeed = Value
    end,
})

local function toggleFly(enable)
    local primaryPart = character.PrimaryPart
    if not primaryPart then return end

    if enable then
        if not movers[1] then
            local bodyVelocity = Instance.new("BodyVelocity")
            bodyVelocity.MaxForce = Vector3.one * 9e9

            local bodyGyro = Instance.new("BodyGyro")
            bodyGyro.MaxTorque = Vector3.one * 9e9
            bodyGyro.P = 9e4

            local bodyAngularVelocity = Instance.new("BodyAngularVelocity")
            bodyAngularVelocity.AngularVelocity = Vector3.yAxis * 9e9
            bodyAngularVelocity.MaxTorque = Vector3.yAxis * 9e9
            bodyAngularVelocity.P = 9e9

            movers = {bodyVelocity, bodyGyro, bodyAngularVelocity}
        end

        flying = true
        runService.Heartbeat:Connect(function()
            if not flying then return end

            local camCFrame = camera.CFrame
            local velocity = Vector3.zero
            local rotation = camCFrame.Rotation

            if userInputService:IsKeyDown(Enum.KeyCode.W) then
                velocity += camCFrame.LookVector
                rotation *= CFrame.Angles(math.rad(-40), 0, 0)
            end
            if userInputService:IsKeyDown(Enum.KeyCode.S) then
                velocity -= camCFrame.LookVector
                rotation *= CFrame.Angles(math.rad(40), 0, 0)
            end
            if userInputService:IsKeyDown(Enum.KeyCode.D) then
                velocity += camCFrame.RightVector
                rotation *= CFrame.Angles(0, 0, math.rad(-40))
            end
            if userInputService:IsKeyDown(Enum.KeyCode.A) then
                velocity -= camCFrame.RightVector
                rotation *= CFrame.Angles(0, 0, math.rad(40))
            end
            if userInputService:IsKeyDown(Enum.KeyCode.E) then
                velocity += Vector3.yAxis
            end
            if userInputService:IsKeyDown(Enum.KeyCode.Q) then
                velocity -= Vector3.yAxis
            end

            local tweenInfo = TweenInfo.new(0.5)
            tweenService:Create(movers[1], tweenInfo, { Velocity = velocity * flySpeed }):Play()
            movers[1].Parent = primaryPart
            tweenService:Create(movers[2], tweenInfo, { CFrame = rotation }):Play()
            movers[2].Parent = primaryPart
        end)
    else
        flying = false
        for _, mover in ipairs(movers) do
            if mover then mover.Parent = nil end
        end
    end
end

local FlyToggle = PlayerTap:CreateToggle({
    Name = "Fly Mode",
    CurrentValue = false,
    Flag = "FlyToggle",
    Callback = function(Value)
        toggleFly(Value)
    end,
})


-- Modification to Auto Farm Tab
local AutoFarmTab = Window:CreateTab("Auto Farm", 0)
local AutoFarmSection = AutoFarmTab:CreateSection("Farm Options")

local autoFarmActive = false
local maxDistance = 5000

-- الحصول على اللاعبين في السيرفر الحالي
local function getTeammates()
    local teammates = {}
    for _, p in pairs(game.Players:GetPlayers()) do
        if p.Team == player.Team then
            table.insert(teammates, p.Name)
        end
    end
    return teammates
end

local function findClosestAliveNPC(maxDist, part)
    local teammates = getTeammates()
    local lastDist = maxDist
    local closest = nil
    
    for _, v in pairs(workspace:GetDescendants()) do
        if v:IsA("Model") and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") then
            local hum = v:FindFirstChild("Humanoid")
            local playerInModel = game.Players:GetPlayerFromCharacter(v)
            
            -- التأكد من عدم استهداف الزملاء
            local isTeammate = playerInModel and table.find(teammates, playerInModel.Name)
            
            if hum and hum.Health > 0 and not isTeammate then
                local thisDist = (v.HumanoidRootPart.Position - part.Position).Magnitude
                if thisDist < lastDist then
                    closest = v
                    lastDist = thisDist
                end
            end
        end
    end
    return closest
end

local function attackNPC(npc)
    pcall(function()
        if npc and npc:FindFirstChild("Humanoid") and npc.Humanoid.Health > 0 then
            local tool = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool")
            if tool then
                tool:Activate()
            end
        end
    end)
end

-- إيقاف الجاذبية للثبات في الهواء
local function disableGravity()
    for _, v in pairs(character:GetDescendants()) do
        if v:IsA("BasePart") then
            v.CustomPhysicalProperties = PhysicalProperties.new(0, 0, 0, 0, 0)
        end
    end
end

-- تمكين الجاذبية
local function enableGravity()
    for _, v in pairs(character:GetDescendants()) do
        if v:IsA("BasePart") then
            v.CustomPhysicalProperties = PhysicalProperties.new(0.7, 0.3, 0.5, 0.05, 50)
        end
    end
end

local function startAutoFarm()
    disableGravity()
    spawn(function()
        while autoFarmActive do
            pcall(function()
                local player = game.Players.LocalPlayer
                local char = player.Character or player.CharacterAdded:Wait()
                local hrp = char:FindFirstChild("HumanoidRootPart")
                
                if char and hrp then
                    local target = findClosestAliveNPC(maxDistance, hrp)
                    
                    if target and target:FindFirstChild("HumanoidRootPart") then
                        local targetSize = target:GetExtentsSize().Y
                        local targetPos = target.HumanoidRootPart.Position
                        
                        -- Positioning directly above NPC based on its size
                        local yOffset = targetSize + 3  -- Add small buffer
                        
                        -- Teleport above NPC and look up (opposite of previous version)
                        hrp.CFrame = CFrame.new(targetPos + Vector3.new(0, yOffset, 0)) * 
                                     CFrame.Angles(math.rad(-90), 0, 0)
                        
                        -- Attack NPC
                        attackNPC(target)
                    end
                end
            end)
            task.wait(0.1)
        end
        
        -- إعادة تمكين الجاذبية عند إيقاف الفارم
        enableGravity()
    end)
end

local AutoFarmToggle = AutoFarmTab:CreateToggle({
    Name = "Auto Farm",
    CurrentValue = false,
    Flag = "AutoFarmToggle",
    Callback = function(Value)
        autoFarmActive = Value
        if Value then
            startAutoFarm()
        end
    end
})

local DistanceSlider = AutoFarmTab:CreateSlider({
    Name = "Farm Radius",
    Range = {100, 10000},
    Increment = 100,
    Suffix = "Studs",
    CurrentValue = 5000,
    Flag = "FarmRadius",
    Callback = function(Value)
        maxDistance = Value
    end,
})
